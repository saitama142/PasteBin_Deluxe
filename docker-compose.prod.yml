version: '3.8'

services:
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: pastebin-backend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_PATH=/app/data/pastes.db
      - JWT_SECRET=${JWT_SECRET}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - MAX_PASTE_SIZE=${MAX_PASTE_SIZE:-1048576}
      - MAX_PASTES_PER_IP=${MAX_PASTES_PER_IP:-10}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-15}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    volumes:
      - pastebin_data:/app/data:Z
      - backend_logs:/var/log:Z
    networks:
      - pastebin_network
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=64M
      - /var/cache:noexec,nosuid,size=32M
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: pastebin-frontend-prod
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - pastebin_network
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - CHOWN
      - DAC_OVERRIDE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=32M
      - /var/cache/nginx:noexec,nosuid,size=64M
      - /var/run:noexec,nosuid,size=16M
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  reverse-proxy:
    image: traefik:v2.10
    container_name: pastebin-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
      - --accesslog=true
      - --global.sendanonymoususage=false
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - pastebin_network
    security_opt:
      - no-new-privileges:true
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=myresolver
      - traefik.http.routers.frontend.service=frontend
      - traefik.http.services.frontend.loadbalancer.server.port=80
      - traefik.http.routers.frontend-http.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.frontend-http.entrypoints=web
      - traefik.http.routers.frontend-http.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

volumes:
  pastebin_data:
    driver: local
  backend_logs:
    driver: local
  letsencrypt_data:
    driver: local

networks:
  pastebin_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
